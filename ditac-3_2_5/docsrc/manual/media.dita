<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
"concept.dtd">
<concept id="media">
  <title>Rich media content</title>

  <abstract><shortdesc>This chapter explains how to add SVG, MathML, audio,
  video and Flash animations to your DITA topics and how
  <cmdname>ditac</cmdname> processes this rich media content in the case where
  the output format supports rich media (e.g. XHTML 5, EPUB 3) and also in the
  case where the output format does not support rich media (e.g. XHTML 1, PDF,
  RTF).</shortdesc><note product="XXE">XMLmind XML Editor has buttons in its
  DITA <uicontrol>Topic</uicontrol> tool bar which allows to easily insert any
  of the elements and processing-instructions described in this chapter.<fig
      id="xxe_image_menu">
      <title>The menu displayed by the "<uicontrol>Add image</uicontrol>"
      button</title>

      <image href="media/xxe_image_menu.png"/>
    </fig><fig id="xxe_mathml_menu">
      <title>The menu displayed by the "<uicontrol>Add MathML
      equation</uicontrol>" button</title>

      <image href="media/xxe_math_menu.png"/>
    </fig><fig id="xxe_media_menu">
      <title>The menu displayed by the "<uicontrol>Insert media
      object</uicontrol>" button</title>

      <image href="media/xxe_media_menu.png"/>
    </fig></note></abstract>

  <conbody>
    <section id="svg"><title>SVG</title><p>It is possible to include SVG
    graphics<indexterm>SVG</indexterm> in a DITA document either by reference
    or by inclusion. Use an
    <xmlelement>svg-container</xmlelement>/<xmlelement>svgref</xmlelement>
    element pointing to an SVG file to include it by reference.
    Example:</p><p><svg-container>
        <svgref href="media/graphic.svg"/>
      </svg-container></p><p>The XML source code corresponding to the above
    example is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;svg-container&gt;&lt;svgref href="media/graphic.svg"/&gt;&lt;/svg-container&gt;&lt;/p&gt;</pre><p>It's
    also possible to use an <xmlelement>image</xmlelement> element pointing to
    an SVG file to include it by reference. Example:</p><pre
    outputclass="language-xml">&lt;p&gt;&lt;image href="media/graphic.svg"/&gt;&lt;/p&gt;</pre><p>Embedding
    SVG graphics in a DITA document can be achieved using the same
    <xmlelement>svg-container</xmlelement> element.
    Example:</p><p><svg-container>
        <svg:svg height="64.710144" id="svg2" version="1.1"
                 viewBox="0 0 104.28986 51.768115" width="130.36232"
                 xmlns:svg="http://www.w3.org/2000/svg">
          <svg:defs id="defs40"/>

          <svg:g id="g3019"
                 transform="matrix(0.3647343,0,0,0.3647343,4.0000001,3.999999)">
            <svg:path d="m 0,0 156.36,0 c -11.54,2.31 -22.72,11.13 -24.59,23.28 0.7,0.07 2.09,0.2 2.79,0.27 -1.03,3.63 -1.66,7.36 -2.37,11.07 -4.86,-1.01 -9.76,-1.82 -14.71,-2.21 -0.16,1.35 -0.27,2.7 -0.37,4.05 -1.26,0.89 -2.28,2.24 -1.6,3.85 4.15,2.6 9.08,3.38 13.79,4.4 -0.63,8.55 -2.62,18.5 3.17,25.79 2.52,2.83 4.62,6.7 8.57,7.67 5.11,0.77 9.72,-2.61 13.13,-6.03 2.09,-2.1 -0.13,-5.95 -3,-5.4 -1.88,1.16 -3.47,2.71 -5.11,4.17 -2.83,-0.78 -6.3,-1.66 -7.12,-4.93 -1.68,-6.59 -1.3,-13.55 -0.78,-20.27 5.4,0.29 10.8,0.83 16.21,0.55 -0.49,-1.34 -0.14,-3.32 -1.74,-3.98 -4.19,-2.4 -8.87,-3.8 -13.3,-5.71 0.51,-3.63 1.1,-7.26 2,-10.82 0.15,-0.31 0.45,-0.92 0.6,-1.23 2.44,0.52 5.54,-0.06 7.34,2.07 2.01,2.13 4.46,3.74 6.82,5.45 1.79,2.83 2.72,6.26 5.3,8.57 4.8,5.01 12.01,5.86 18.33,7.74 -1.78,6.24 -9.22,7.8 -12.67,12.82 -2.04,3.23 -4.62,6.72 -2.89,10.73 0.53,-1.8 1.01,-3.61 1.48,-5.43 0.5,1.19 1,2.38 1.5,3.57 5.82,1.42 11.64,-2.61 17.41,-0.44 1.66,0.54 1.72,2.57 2.46,3.88 -5.4,-0.1 -11.1,-1.1 -16.23,1.13 -4.18,1.76 -7.98,5.58 -8.04,10.36 0.17,4.15 3.68,7.4 7.42,8.64 5.23,1.58 10.79,0.34 15.81,-1.45 0.39,0.29 1.18,0.87 1.58,1.17 3.36,-0.18 6.85,0.38 10.12,-0.63 2.35,-0.85 2.37,-4.46 0.54,-5.86 -1.5,-0.63 -3.14,-0.81 -4.71,-1.16 0.01,-4.84 0.12,-9.68 0,-14.52 -0.05,-3.65 -2.95,-6.23 -4.94,-8.97 -2.24,-2.53 -5.97,-2.04 -9.02,-2.08 2.93,-1.23 5.89,-2.43 8.89,-3.52 2.07,0.54 4.37,1.16 6.4,0.08 2.52,-1.07 3.1,-4.01 3.88,-6.34 5.61,-1.83 10.4,-5.37 15.62,-8.02 3.96,-3.01 8.49,-5.45 11.64,-9.4 2.02,-2.68 5.21,-3.98 7.74,-6.09 2.85,-2.36 6.61,-3.58 8.74,-6.78 4.31,-0.76 8.72,-0.93 12.98,-1.94 3.32,-1.84 6.44,-4.23 8.57,-7.43 L 264,120 0,120 0,73.78 c 11.14,6.37 22.37,12.6 33.65,18.7 3.34,2.36 7.69,-3.07 4.31,-5.6 -7.6,-4.74 -15.67,-8.74 -23.44,-13.21 7.07,-3.99 14.2,-7.88 21.29,-11.83 1.22,-0.81 2.76,-1.52 3.26,-3.01 -0.11,-1.22 -0.41,-2.42 -0.66,-3.62 -1.1,-0.38 -2.2,-0.75 -3.3,-1.13 C 23.27,60.27 11.73,67.02 0,73.4 L 0,0 z"
                      id="path4" style="fill:#ffffff"/>

            <svg:path d="m 156.36,0 4.03,0 c 5.92,1.05 11.88,2.21 17.51,4.38 2.55,1.2 5.32,0.19 7.95,-0.12 7.07,-1.02 14.06,0.99 21.08,1.47 4.71,0.4 9.52,0.33 14.09,1.7 7.9,3.16 16.72,2.97 25,1.56 5.97,-1.03 12.02,-0.37 17.98,0.38 l 0,1.3 c -2.13,3.2 -5.25,5.59 -8.57,7.43 -4.26,1.01 -8.67,1.18 -12.98,1.94 -2.13,3.2 -5.89,4.42 -8.74,6.78 -2.53,2.11 -5.72,3.41 -7.74,6.09 -3.15,3.95 -7.68,6.39 -11.64,9.4 -5.22,2.65 -10.01,6.19 -15.62,8.02 -0.78,2.33 -1.36,5.27 -3.88,6.34 -2.03,1.08 -4.33,0.46 -6.4,-0.08 -3,1.09 -5.96,2.29 -8.89,3.52 3.05,0.04 6.78,-0.45 9.02,2.08 1.99,2.74 4.89,5.32 4.94,8.97 0.12,4.84 0.01,9.68 0,14.52 1.57,0.35 3.21,0.53 4.71,1.16 1.83,1.4 1.81,5.01 -0.54,5.86 -3.27,1.01 -6.76,0.45 -10.12,0.63 -0.4,-0.3 -1.19,-0.88 -1.58,-1.17 -5.02,1.79 -10.58,3.03 -15.81,1.45 -3.74,-1.24 -7.25,-4.49 -7.42,-8.64 0.06,-4.78 3.86,-8.6 8.04,-10.36 5.13,-2.23 10.83,-1.23 16.23,-1.13 -0.74,-1.31 -0.8,-3.34 -2.46,-3.88 -5.77,-2.17 -11.59,1.86 -17.41,0.44 -0.5,-1.19 -1,-2.38 -1.5,-3.57 -0.47,1.82 -0.95,3.63 -1.48,5.43 -1.73,-4.01 0.85,-7.5 2.89,-10.73 3.45,-5.02 10.89,-6.58 12.67,-12.82 -6.32,-1.88 -13.53,-2.73 -18.33,-7.74 -2.58,-2.31 -3.51,-5.74 -5.3,-8.57 -2.36,-1.71 -4.81,-3.32 -6.82,-5.45 -1.8,-2.13 -4.9,-1.55 -7.34,-2.07 -0.15,0.31 -0.45,0.92 -0.6,1.23 0.19,-2.48 0.25,-4.96 0.34,-7.43 -3.27,0.37 -6.36,1.7 -7.11,5.23 -0.7,-0.07 -2.09,-0.2 -2.79,-0.27 C 133.64,11.13 144.82,2.31 156.36,0 z"
                      id="path6" style="fill:#010101"/>

            <svg:path d="M 160.39,0 264,0 l 0,9.37 c -5.96,-0.75 -12.01,-1.41 -17.98,-0.38 -8.28,1.41 -17.1,1.6 -25,-1.56 -4.57,-1.37 -9.38,-1.3 -14.09,-1.7 -7.02,-0.48 -14.01,-2.49 -21.08,-1.47 -2.63,0.31 -5.4,1.32 -7.95,0.12 C 172.27,2.21 166.31,1.05 160.39,0 z"
                      id="path8" style="fill:#ffffff"/>

            <svg:path d="m 143.71,12.24 c 2.77,-4.96 8.77,-7.69 14.26,-8.24 6.78,0.63 13.53,2.26 19.86,4.81 -3.12,3.14 -6.51,6.15 -10.74,7.67 -2.78,1.03 -3.22,4.27 -3.26,6.84 1.26,-0.15 2.52,-0.29 3.78,-0.42 0.14,-3.16 3.5,-3.4 5.62,-4.81 3.64,-2.2 6.46,-5.44 9.48,-8.39 1.32,-1.41 3.38,-1.52 5.17,-1.68 6.45,-0.25 12.76,1.45 19.17,1.79 4.45,0.29 8.96,0.42 13.3,1.56 0.16,0.38 0.48,1.15 0.64,1.53 2.5,0.2 5,0.42 7.5,0.68 -0.1,0.31 -0.29,0.95 -0.39,1.27 1.05,0.24 3.15,0.71 4.2,0.94 -5.06,2.41 -10.37,4.31 -15.17,7.26 -3.48,2.29 -7.67,2.98 -11.49,4.48 -3.63,1.43 -7.74,1.02 -11.25,2.84 -3.04,1.54 -6.38,2.29 -9.58,3.43 -2.6,0.94 -4.71,-1.34 -6.66,-2.67 -0.92,0.96 -1.84,1.92 -2.75,2.89 2.68,2.9 6.72,4.86 10.72,3.75 3.74,-1.18 7.5,-2.36 11.03,-4.13 8.66,-1.65 17.43,-3.92 24.99,-8.65 3.9,-2.28 8.3,-3.5 12.29,-5.57 2.07,-1.01 3.03,-3.12 2.92,-5.36 6.04,-0.28 11.99,-1.87 18.08,-1.48 -0.42,0.43 -1.25,1.3 -1.67,1.74 -4.77,0.82 -9.59,1.26 -14.38,1.96 -0.84,1.43 -1.41,3.26 -3.14,3.86 -3.62,1.62 -6.19,4.81 -9.75,6.54 -2.82,1.39 -3.99,4.58 -6.44,6.41 -4.46,3.01 -8.51,6.63 -13.58,8.63 -3.41,2.62 -7.41,4.23 -11.52,5.4 -0.33,2.21 -0.79,4.44 -2.09,6.3 -0.18,-2.39 0.88,-5.31 -1.11,-7.23 -7.64,-1.25 -15.41,-2.42 -22.66,-5.29 -4.98,-2.02 -8.33,-6.87 -9.06,-12.12 -4.06,-1.12 -7.09,-4.17 -9.75,-7.27 -0.62,-1.46 -0.22,-3.18 -0.4,-4.74 -1.97,-1.65 -3.62,-3.74 -6.17,-4.53 z"
                      id="path10" style="fill:#ffffff"/>

            <svg:path d="m 149.31,9.75 c 1.7,-0.11 3.4,-0.06 5.11,0.08 -0.68,2.82 -3.09,3.94 -5.84,3.45 0.18,-0.89 0.54,-2.65 0.73,-3.53 z"
                      id="path12" style="fill:#010101"/>

            <svg:path d="m 137.03,19.13 c 1.17,-2.08 2.47,-4.09 3.86,-6.03 1.69,0.94 3.42,1.82 5.12,2.75 -3.14,0.65 -6.09,1.93 -8.98,3.28 z"
                      id="path14" style="fill:#ffffff"/>

            <svg:path d="m 142.04,20.64 c 2,-0.94 3.83,-2.2 5.45,-3.71 0.29,1.4 0.5,2.81 0.83,4.2 -2.09,-0.2 -4.18,-0.41 -6.28,-0.49 z"
                      id="path16" style="fill:#ffffff"/>

            <svg:path d="m 142.08,18.25 c 0.54,0.55 0.54,0.55 0,0 z"
                      id="path18" style="fill:#0a51a0"/>

            <svg:path d="m 134.56,23.55 c 0.75,-3.53 3.84,-4.86 7.11,-5.23 -0.09,2.47 -0.15,4.95 -0.34,7.43 -0.9,3.56 -1.49,7.19 -2,10.82 4.43,1.91 9.11,3.31 13.3,5.71 1.6,0.66 1.25,2.64 1.74,3.98 -5.41,0.28 -10.81,-0.26 -16.21,-0.55 -0.52,6.72 -0.9,13.68 0.78,20.27 0.82,3.27 4.29,4.15 7.12,4.93 1.64,-1.46 3.23,-3.01 5.11,-4.17 2.87,-0.55 5.09,3.3 3,5.4 -3.41,3.42 -8.02,6.8 -13.13,6.03 -3.95,-0.97 -6.05,-4.84 -8.57,-7.67 -5.79,-7.29 -3.8,-17.24 -3.17,-25.79 -4.71,-1.02 -9.64,-1.8 -13.79,-4.4 -0.68,-1.61 0.34,-2.96 1.6,-3.85 0.1,-1.35 0.21,-2.7 0.37,-4.05 4.95,0.39 9.85,1.2 14.71,2.21 0.71,-3.71 1.34,-7.44 2.37,-11.07 z"
                      id="path20" style="fill:#0a51a0"/>

            <svg:path d="m 71.09,55.85 c -1.87,-1.86 -0.88,-5.71 1.92,-5.96 3.41,-0.39 6.85,-0.1 10.27,-0.16 -0.04,12.01 0.08,24.03 -0.06,36.05 1.9,0.44 4.58,0.14 5.5,2.31 1.25,2.53 -0.98,5.5 -3.75,5.13 -3.08,-0.36 -7.12,1.3 -9.49,-1.13 -6.78,3.29 -15.81,3.27 -21.66,-1.89 -7.06,-6.01 -6.5,-18.14 0.49,-23.98 5.73,-5.63 15.14,-5.52 21.7,-1.41 0,-2.63 -0.01,-5.26 -0.01,-7.89 -1.64,-0.26 -3.56,0.1 -4.91,-1.07 z"
                      id="path22" style="fill:#010101"/>

            <svg:path d="m 105.46,50 c 2.78,-0.01 5.55,0 8.32,0 -0.01,2.51 0,5.02 -0.01,7.53 -2.77,0 -5.54,0 -8.31,-0.02 0.01,-2.5 0.02,-5.01 0,-7.51 z"
                      id="path24" style="fill:#010101"/>

            <svg:path d="m 180.28,53.55 c 3.16,0.3 6.19,-0.82 8.56,-2.89 -0.29,1.09 -0.56,2.19 -0.81,3.29 -5.37,2.01 -10.98,3.44 -16.03,6.21 2.69,-2.29 5.46,-4.48 8.28,-6.61 z"
                      id="path26" style="fill:#ffffff"/>

            <svg:path d="m 0,73.4 c 11.73,-6.38 23.27,-13.13 35.11,-19.32 1.1,0.38 2.2,0.75 3.3,1.13 0.25,1.2 0.55,2.4 0.66,3.62 -0.5,1.49 -2.04,2.2 -3.26,3.01 -7.09,3.95 -14.22,7.84 -21.29,11.83 7.77,4.47 15.84,8.47 23.44,13.21 3.38,2.53 -0.97,7.96 -4.31,5.6 C 22.37,86.38 11.14,80.15 0,73.78 L 0,73.4 z"
                      id="path28" style="fill:#010101"/>

            <svg:path d="m 208.19,55.18 c 0.71,-0.28 2.12,-0.84 2.82,-1.12 12.04,6.2 23.72,13.11 35.63,19.56 -11.08,6.23 -22.2,12.41 -33.34,18.54 -1.66,1.31 -3.58,0.64 -5.35,0.02 -0.62,-1.76 -1.5,-4.25 0.51,-5.47 7.66,-4.53 15.54,-8.72 23.33,-13.04 -7.39,-4.1 -14.8,-8.17 -22.17,-12.31 -1.39,-0.65 -2.11,-2.05 -2.89,-3.29 0.49,-0.96 0.98,-1.92 1.46,-2.89 z"
                      id="path30" style="fill:#010101"/>

            <svg:path d="m 98.88,63.01 c 5.21,-0.51 10.44,0.18 15.67,0.02 -0.15,7.72 0.27,15.46 -0.34,23.17 3.56,0.46 7.19,-0.04 10.73,0.55 3.16,0.7 2.86,6.32 -0.44,6.64 -8.47,0.49 -16.96,-0.15 -25.44,-0.12 -1.7,0 -4.28,-0.33 -4.55,-2.41 -0.81,-1.92 0.56,-4.44 2.7,-4.55 3.33,-0.25 6.67,-0.05 10.01,-0.08 -0.05,-5.41 0.01,-10.81 0.3,-16.2 -3.09,-0.29 -6.69,0.75 -9.4,-1.15 -1.69,-1.81 -0.68,-4.29 0.76,-5.87 z"
                      id="path32" style="fill:#010101"/>

            <svg:path d="m 62.45,69.6 c 6.59,-2.82 14.69,3.37 13.48,10.47 -1.5,8.92 -16.27,9.69 -19.47,1.57 -1.79,-4.8 1.36,-10.31 5.99,-12.04 z"
                      id="path34" style="fill:#ffffff"/>

            <svg:path d="m 169.82,84.22 c 4.14,-4.86 10.95,-4.26 16.6,-3.27 0.02,0.71 0.05,2.14 0.07,2.86 -4.13,2.13 -8.85,4.08 -13.57,3.1 -1.56,-0.09 -2.19,-1.71 -3.1,-2.69 z"
                      id="path36" style="fill:#ffffff"/>
          </svg:g>
        </svg:svg>
      </svg-container></p><p>The XML source code corresponding to the above
    example is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;svg-container&gt;
  &lt;svg:svg height="64.710144" version="1.1"
    viewBox="0 0 104.28986 51.768115" width="130.36232"
    xmlns:svg="http://www.w3.org/2000/svg"&gt;
  ...
  &lt;/svg:svg&gt;
&lt;/svg-container&gt;&lt;/p&gt;</pre><p>Notes:</p><ul>
        <li>It is still recommended to include SVG graphics by reference using
        the <xmlelement>image</xmlelement> element rather then
        <xmlelement>svg-container</xmlelement>/<xmlelement>svgref</xmlelement>.
        The <xmlelement>image</xmlelement> element has useful attributes
        (<xmlatt>width</xmlatt>, <xmlatt>height</xmlatt>,
        <xmlatt>scale</xmlatt>, <xmlatt>scalefit</xmlatt>) allowing to adjust
        the dimension of the image. Moreover this elements permits on the fly
        conversion between image formats.</li>

        <li>It is not recommended to embed SVG graphics in a DITA document as
        this is likely to cause many validation problems.</li>

        <li>Only the following screen formats may contain SVG:
        XHTML 5<indexterm>XHTML 5, output format</indexterm>, XHTML 5 Web
        Help<indexterm>Web Help 5, output format</indexterm> and
        EPUB 3<indexterm>EPUB 3, output format</indexterm>. Note that only
        modern web browsers support XHTML 5 and XHTML 5 Web Help. Very few
        EPUB readers (e.g. iBooks) support EPUB 3.</li>

        <li>All XSL-FO based formats (PDF, RTF, DOCX, etc) support SVG
        whatever the XSL-FO processor you may use.</li>
      </ul></section>

    <section id="mathml"><title>MathML</title><p>It is possible to include
    math <indexterm>MathML</indexterm> in a DITA document either by reference
    or by inclusion. Use an
    <xmlelement>mathml</xmlelement>/<xmlelement>mathmlref</xmlelement> element
    pointing to a MathML file to include it by reference.
    Example:</p><p><mathml>
        <mathmlref href="media/math.mml"/>
      </mathml></p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;mathml&gt;&lt;mathmlref href="media/math.mml"/&gt;&lt;/mathml&gt;&lt;/p&gt;</pre><p>Embedding
    MathML in a DITA document can be achieved using the same
    <xmlelement>mathml</xmlelement> element. Example:</p><p><mathml>
        <m:math display="block" xmlns:m="http://www.w3.org/1998/Math/MathML">
          <m:mrow>
            <m:mo>{</m:mo>

            <m:mtable>
              <m:mtr>
                <m:mtd>
                  <m:mrow>
                    <m:mrow>
                      <m:maligngroup/>

                      <m:mo>∇×</m:mo>

                      <m:mi mathvariant="bold">E</m:mi>
                    </m:mrow>

                    <m:maligngroup/>

                    <m:mo>=</m:mo>

                    <m:mrow>
                      <m:maligngroup/>

                      <m:mo>-</m:mo>

                      <m:mstyle mathsize="100%">
                        <m:mfrac>
                          <m:mrow>
                            <m:mo>∂</m:mo>

                            <m:mo>⁡</m:mo>

                            <m:mi mathvariant="bold">B</m:mi>
                          </m:mrow>

                          <m:mrow>
                            <m:mo>∂</m:mo>

                            <m:mo>⁡</m:mo>

                            <m:mi>t</m:mi>
                          </m:mrow>
                        </m:mfrac>
                      </m:mstyle>
                    </m:mrow>
                  </m:mrow>
                </m:mtd>
              </m:mtr>

              <m:mtr>
                <m:mtd>
                  <m:mrow>
                    <m:mrow>
                      <m:maligngroup/>

                      <m:mo>∇×</m:mo>

                      <m:mi mathvariant="bold">B</m:mi>
                    </m:mrow>

                    <m:maligngroup/>

                    <m:mo>=</m:mo>

                    <m:mrow>
                      <m:mrow>
                        <m:maligngroup/>

                        <m:msub>
                          <m:mi>μ</m:mi>

                          <m:mn>0</m:mn>
                        </m:msub>

                        <m:mo>⁢</m:mo>

                        <m:mi mathvariant="bold">J</m:mi>
                      </m:mrow>

                      <m:mo>+</m:mo>

                      <m:mrow>
                        <m:msub>
                          <m:mi>μ</m:mi>

                          <m:mn>0</m:mn>
                        </m:msub>

                        <m:mo>⁢</m:mo>

                        <m:msub>
                          <m:mi>ε</m:mi>

                          <m:mn>0</m:mn>
                        </m:msub>

                        <m:mo>⁢</m:mo>

                        <m:mstyle mathsize="100%">
                          <m:mfrac>
                            <m:mrow>
                              <m:mo>∂</m:mo>

                              <m:mo>⁡</m:mo>

                              <m:mi mathvariant="bold">E</m:mi>
                            </m:mrow>

                            <m:mrow>
                              <m:mo>∂</m:mo>

                              <m:mo>⁡</m:mo>

                              <m:mi>t</m:mi>
                            </m:mrow>
                          </m:mfrac>
                        </m:mstyle>
                      </m:mrow>
                    </m:mrow>
                  </m:mrow>
                </m:mtd>
              </m:mtr>
            </m:mtable>
          </m:mrow>
        </m:math>
      </mathml></p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;mathml&gt;
  &lt;m:math display="block" 
    xmlns:m="http://www.w3.org/1998/Math/MathML"&gt;
    &lt;m:row&gt;
    ...
    &lt;/m:mrow&gt;
  &lt;/m:math&gt;
&lt;/mathml&gt;&lt;/p&gt;</pre><p>Notes:</p><ul>
        <li>For clarity, it is recommended to wrap
        <xmlelement>mathml</xmlelement> into the following equation elements:
        <xmlelement>equation-inline</xmlelement>,
        <xmlelement>equation-block</xmlelement>,
        <xmlelement>equation-figure</xmlelement>.</li>

        <li>There is an option to number
        <xmlelement>equation-figure</xmlelement> elements having a
        <xmlelement>title</xmlelement>. Example:<equation-figure>
            <title>Gauss's law in its differential form</title>

            <mathml>
              <m:math display="block"
                      xmlns:m="http://www.w3.org/1998/Math/MathML">
                <m:mrow>
                  <m:mrow>
                    <m:mi>∇</m:mi>

                    <m:mo>⁣</m:mo>

                    <m:mi mathvariant="bold">E</m:mi>
                  </m:mrow>

                  <m:mo>=</m:mo>

                  <m:mfrac>
                    <m:mi>ρ</m:mi>

                    <m:msub>
                      <m:mi>ε</m:mi>

                      <m:mn>0</m:mn>
                    </m:msub>
                  </m:mfrac>
                </m:mrow>
              </m:math>
            </mathml>
          </equation-figure><p><xmlelement>equation-block</xmlelement>
        elements containing a empty <xmlelement>equation-number</xmlelement>
        are automatically numbered. Example:</p><equation-block><mathml>
            <m:math display="inline"
                    xmlns:m="http://www.w3.org/1998/Math/MathML">
              <m:mrow>
                <m:mrow>
                  <m:mi>∇</m:mi>

                  <m:mo>⁣</m:mo>

                  <m:mi mathvariant="bold">E</m:mi>
                </m:mrow>

                <m:mo>=</m:mo>

                <m:mfrac>
                  <m:mi>ρ</m:mi>

                  <m:msub>
                    <m:mi>ε</m:mi>

                    <m:mn>0</m:mn>
                  </m:msub>
                </m:mfrac>
              </m:mrow>
            </m:math>
          </mathml> <equation-number/></equation-block><p>The counter used to
        number to <xmlelement>equation-figure</xmlelement> elements having a
        <xmlelement>title</xmlelement> and the counter used to number
        <xmlelement>equation-block</xmlelement> elements containing an empty
        <xmlelement>equation-number</xmlelement> are different. Therefore
        mixing numbered <xmlelement>equation-figure</xmlelement>s and numbered
        <xmlelement>equation-block</xmlelement>s in the same DITA document may
        result in a hard to understand equation numbering.</p></li>

        <li>Only the following screen formats may contain MathML:
        XHTML 5<indexterm>XHTML 5, output format</indexterm>, XHTML 5 Web
        Help<indexterm>Web Help 5, output format</indexterm> and
        EPUB 3<indexterm>EPUB 3, output format</indexterm>. Most modern web
        browsers (Firefox, Chrome) support XHTML 5 and XHTML 5 Web Help
        containing MathML. Very few EPUB readers (e.g. iBooks) support
        EPUB 3.</li>

        <li>XSL-FO based formats(PDF, RTF, DOCX, etc) support MathML depending
        on the XSL-FO processor you use:<ul compact="yes">
            <li><xref format="html" href="http://xmlgraphics.apache.org/fop/"
            scope="external">Apache FOP</xref> requires you to download and
            install the the <xref format="html"
            href="http://jeuclid.sourceforge.net/jeuclid-fop/index.html"
            scope="external">JEuclid FOP plug-in</xref>.</li>

            <li><xref format="html"
            href="http://www.renderx.com/tools/xep.html"
            scope="external">RenderX XEP</xref> does not support MathML.</li>

            <li><xref format="html"
            href="https://www.antennahouse.com/antenna1/formatter/"
            scope="external">Antenna House Formatter</xref> supports MathML as
            an option.</li>

            <li><xref format="html" href="http://www.xmlmind.com/foconverter/"
            scope="external">XMLmind XSL-FO Converter</xref> supports MathML
            out of the box.</li>
          </ul></li>
      </ul></section>

    <section id="audio"><title>Audio</title><p>Use the
    <xmlelement>object</xmlelement> DITA element to add
    audio<indexterm>audio</indexterm> to your DITA topics.
    Example:</p><p><object data="media/audio.mp3" type="audio/mpeg">
        <param name="source" type="audio/ogg" value="media/audio.ogg"
               valuetype="ref"/>

        <param name="source" type="audio/mp4" value="media/audio.m4a"
               valuetype="ref"/>

        <param name="source" type="audio/wav" value="media/audio.wav"
               valuetype="ref"/>

        <param name="controls" value="true"/>
      </object></p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;object data="media/audio.mp3" type="audio/mpeg"&gt;
     &lt;param name="source" value="media/audio.ogg"
            valuetype="ref" type="audio/ogg"/&gt;

     &lt;param name="source" value="media/audio.m4a"
            valuetype="ref" type="audio/mp4"/&gt;

     &lt;param name="source" value="media/audio.wav"
            valuetype="ref" type="audio/wav"/&gt;

     &lt;param name="controls" value="true"/&gt;
&lt;/object&gt;&lt;/p&gt;</pre><p>Notes:</p><ul>
        <li>The <xmlatt>data</xmlatt> and <xmlatt>type</xmlatt> attributes are
        required. The value of the <xmlatt>type</xmlatt> attribute must start
        with "<tt>audio/</tt>".</li>

        <li>It is strongly recommended to specify <i>alternate audio files</i>
        as modern web browsers, while all supporting the HTML 5
        <xmlelement>audio</xmlelement> element, vary in their support of audio
        formats. This is done by adding <xmlelement>param</xmlelement> child
        elements to the <xmlelement>object</xmlelement> element. Such
        <xmlelement>param</xmlelement> elements must have a
        <tt>name="source"</tt> attribute, a <tt>valuetype="ref"</tt>
        attribute, a <xmlatt>value</xmlatt> attribute referencing an audio
        file and preferably, a <xmlatt>type</xmlatt> attribute specifying the
        media type of the audio file.</li>

        <li>It is possible to add <xmlelement>param</xmlelement> elements
        corresponding to the attributes supported by the HTML 5 audio element
        (<xmlelement>crossorigin</xmlelement>,
        <xmlelement>preload</xmlelement>, <xmlelement>autoplay</xmlelement>,
        <xmlelement>mediagroup</xmlelement>, <xmlelement>loop</xmlelement>,
        <xmlelement>muted</xmlelement>, <xmlelement>controls</xmlelement>). In
        the above example, we have added a <xmlelement>param</xmlelement>
        element corresponding to the <xmlatt>controls</xmlatt> HTML 5
        attribute. Note that in the case of HTML 5 <i>boolean</i> attributes
        (<xmlelement>autoplay</xmlelement>, <xmlelement>loop</xmlelement>,
        <xmlelement>muted</xmlelement>, <xmlelement>controls</xmlelement>),
        the <xmlatt>value</xmlatt> attribute of a
        <xmlelement>param</xmlelement> is not significant. For example, in the
        case of the above example, you could have specified "<tt>yes</tt>",
        "<tt>on</tt>", "<tt>1</tt>", etc, instead of "<tt>true</tt>".</li>

        <li>If the <xmlelement>object</xmlelement> element has a
        <xmlelement>desc</xmlelement> child element, then this
        <xmlelement>desc</xmlelement> element is used to generate fallback
        content in case audio is not supported. If the object element has no
        <xmlelement>desc</xmlelement> child element, then a simple fallback
        content is automatically generated by ditac. This automatic fallback
        content basically consists in a link allowing to download the audio
        file.</li>

        <li>When ditac is used to generate an XSL-FO based format (PDF, RTF,
        etc), only the fallback content appears in the output file.</li>
      </ul></section>

    <section id="video"><title>Video</title><p>Use the
    <xmlelement>object</xmlelement> DITA element to add
    video<indexterm>video</indexterm> to your DITA topics.
    Example:</p><p><object data="media/video.mp4" type="video/mp4">
        <param name="source"
               type="video/ogg; codecs=&quot;theora, vorbis&quot;"
               value="media/video.ogv" valuetype="ref"/>

        <param name="source" type="video/webm" value="media/video.webm"
               valuetype="ref"/>

        <param name="width" value="320"/>

        <param name="controls" value="yes"/>

        <param name="poster" value="media/video_poster.jpg" valuetype="ref"/>
      </object></p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;object data="media/video.mp4" type="video/mp4"&gt;
     &lt;param name="source" value="media/video.ogv"
            valuetype="ref" type='video/ogg; codecs="theora, vorbis"'/&gt;

     &lt;param name="source" value="media/video.webm"
            valuetype="ref" type="video/webm"/&gt;

     &lt;param name="width" value="320"/&gt;
     &lt;param name="controls" value="yes"/&gt;
     &lt;param name="poster" value="media/video_poster.jpg"
            valuetype="ref"/&gt;
&lt;/object&gt;&lt;/p&gt;</pre><p>Notes:</p><ul>
        <li>The <xmlatt>data</xmlatt> and <xmlatt>type</xmlatt> attributes are
        required. The value of the <xmlatt>type</xmlatt> attribute must start
        with "<tt>video/</tt>".</li>

        <li>It is strongly recommended to specify <i>alternate video files</i>
        as modern web browsers, while all supporting the HTML 5
        <xmlelement>video</xmlelement> element, vary in their support of video
        formats. This is done by adding <xmlelement>param</xmlelement> child
        elements to the <xmlelement>object</xmlelement> element. Such
        <xmlelement>param</xmlelement> elements must have a
        <tt>name="source"</tt> attribute, a <tt>valuetype="ref"</tt>
        attribute, a <xmlatt>value</xmlatt> attribute referencing a video file
        and preferably, a <xmlatt>type</xmlatt> attribute specifying the media
        type of the video file.</li>

        <li id="other_video_params">It is possible to add
        <xmlelement>param</xmlelement> elements corresponding to the
        attributes supported by the HTML 5 <xmlelement>video</xmlelement>
        element (<xmlelement>crossorigin</xmlelement>,
        <xmlelement>poster</xmlelement>, <xmlelement>preload</xmlelement>,
        <xmlelement>autoplay</xmlelement>,
        <xmlelement>mediagroup</xmlelement>, <xmlelement>loop</xmlelement>,
        <xmlelement>muted</xmlelement>, <xmlelement>controls</xmlelement>,
        <xmlelement>width</xmlelement>, <xmlelement>height</xmlelement>). In
        the above example, we have added a <xmlelement>param</xmlelement>
        element corresponding to the <xmlelement>width</xmlelement>,
        <xmlelement>controls</xmlelement> and <xmlelement>poster</xmlelement>
        HTML 5 attributes. Note that in the case of HTML 5 <i>boolean</i>
        attributes (<xmlelement>autoplay</xmlelement>,
        <xmlelement>loop</xmlelement>, <xmlelement>muted</xmlelement>,
        <xmlelement>controls</xmlelement>), the <xmlatt>value</xmlatt>
        attribute of a <xmlelement>param</xmlelement> is not significant. For
        example, in the case of the above example, you could have specified
        "<tt>true</tt>", "<tt>on</tt>", "<tt>1</tt>", etc, instead of
        "<tt>yes</tt>".</li>

        <li>If the <xmlelement>object</xmlelement> element has a
        <xmlelement>desc</xmlelement> child element, then this
        <xmlelement>desc</xmlelement> element is used to generate fallback
        content in case video is not supported. If the object element has no
        <xmlelement>desc</xmlelement> child element, then a simple fallback
        content is automatically generated by ditac. This automatic fallback
        content basically consists in a link allowing to download the video
        file. The <xmlelement>param</xmlelement> element corresponding to the
        <xmlelement>poster</xmlelement> HTML 5 attribute, if present, is used
        to generate a nicer automatic fallback content.</li>

        <li>When ditac is used to generate an XSL-FO based format (PDF, RTF,
        etc), only the fallback content appears in the output file.</li>
      </ul></section>

    <section id="flash_animation"><title>Flash animation</title><p>Use the
    <xmlelement>object</xmlelement> DITA element to add Adobe® Flash®
    animations<indexterm>Flash</indexterm><indexterm>animation</indexterm><indexterm>.swf<index-sort-as>swf</index-sort-as></indexterm>
    to your DITA topics. Example:</p><p><object data="media/animation.swf"
        height="123" type="application/x-shockwave-flash" width="431">
        <param name="movie" type="application/x-shockwave-flash"
               value="media/animation.swf" valuetype="ref"/>

        <param name="menu" value="true"/>

        <param name="quality" value="low"/>
      </object></p><p>(You may have to right-click on the above screenshot and
    select <uicontrol>Play</uicontrol> from the Flash popup menu to replay the
    animation.)</p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;object data="animation.swf" 
           type="application/x-shockwave-flash" 
           width="431" height="123"&gt;
    &lt;param name="movie" value="animation.swf"
           valuetype="ref" type="application/x-shockwave-flash"/&gt;

    &lt;param name="menu" value="true"/&gt;
    &lt;param name="quality" value="low"/&gt;
&lt;/object&gt;&lt;/p&gt;</pre><p>Notes:</p><ul>
        <li>The <xmlatt>data</xmlatt>, <xmlatt>type</xmlatt>,
        <xmlatt>width</xmlatt> and <xmlatt>height</xmlatt> attributes are
        required. The <tt>param name=movie</tt> child element having the same
        value as attribute <xmlatt>data</xmlatt> is required too.</li>

        <li>You may add any other <xmlelement>param</xmlelement> child element
        supported by the Flash object. In the above example, you'll find
        <tt>menu</tt> and <tt>quality</tt> in addition to required
        <tt>movie</tt>.</li>

        <li>If the <xmlelement>object</xmlelement> element has a
        <xmlelement>desc</xmlelement> child element, then this
        <xmlelement>desc</xmlelement> element is used to generate fallback
        content in case Flash is not supported. If the object element has no
        <xmlelement>desc</xmlelement> child element, then a simple fallback
        content is automatically generated by ditac. This automatic fallback
        content basically consists in a link allowing to download the
        <tt>.swf</tt> file.</li>

        <li>When ditac is used to generate an XSL-FO based format (PDF, RTF,
        etc), only the fallback content appears in the output file.</li>
      </ul></section>

    <section id="other_media_objects"><title>Other uses of the
    <xmlelement>object</xmlelement> element</title><p>We have seen in previous
    sections how the <xmlelement>object</xmlelement> DITA element may be used
    to add audio, video and Adobe® Flash® animations to your DITA topics. In
    any case other than those described in previous sections, the
    <xmlelement>object</xmlelement> DITA element is converted to the
    equivalent <xmlelement>object</xmlelement> XHTML element. For example, if
    you want to add a YouTube<indexterm>YouTube</indexterm>
    video<indexterm>video</indexterm> to your DITA topics, simply do it in
    DITA as you would do it in XHTML using the <xmlelement>object</xmlelement>
    element.</p><p><object data="https://www.youtube.com/embed/C0DPdy98e4c"
        height="360" width="640">
        <desc><image href="media/youtube_icon.png"/> Watch this <xref
        format="html" href="https://youtu.be/C0DPdy98e4c"
        scope="external">test video</xref> on YouTube.</desc>
      </object></p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;&lt;object data="https://www.youtube.com/embed/C0DPdy98e4c"
           width="640" height="360"&gt;
     &lt;desc&gt;&lt;image href="media/youtube_icon.png"/&gt; Watch this &lt;xref format="html"
     href="https://youtu.be/C0DPdy98e4c" scope="external"&gt;test video&lt;/xref&gt; on
     YouTube.&lt;/desc&gt;
&lt;/object&gt;&lt;/p&gt;</pre><p>Notes:</p><ul>
        <li>If the <xmlelement>object</xmlelement> element has a
        <xmlelement>desc</xmlelement> child element, then this
        <xmlelement>desc</xmlelement> element is used to generate fallback
        content in case the media object is not supported. If the object
        element has no <xmlelement>desc</xmlelement> child element, then a
        simple fallback content is automatically generated by ditac. This
        automatic fallback content basically consists in a link allowing to
        download the media file.</li>

        <li>When ditac is used to generate an XSL-FO based format (PDF, RTF,
        etc), only the fallback content appears in the output file.</li>
      </ul></section>

    <section id="actions"><title>Actions</title><p>Unless you add
    <tt>param name="controls"</tt> (see <xref
    href="#media/other_video_params">above</xref>), you'll not be able to play
    audio or video. Even worse, without the <tt>controls</tt>
    <xmlelement>param</xmlelement>, an audio object is not rendered on screen
    (that is, it is invisible).</p><p>A simple solution for this problem is to
    insert a <xmlpi>onclick</xmlpi> processing-instruction in a DITA element
    (typically an <i>inline</i> element such as <xmlelement>xref</xmlelement>
    or <xmlelement>ph</xmlelement>). The <xmlpi>onclick</xmlpi>
    processing-instruction<indexterm>onclick,
    processing-instruction</indexterm> allows to specify an number of
    actions:</p><dl compact="yes">
        <dlentry>
          <dt><tt>play</tt></dt>

          <dd>Play the associated resource from the beginning. Only applicable
          to video or audio targets.</dd>
        </dlentry>

        <dlentry>
          <dt><tt>pause</tt></dt>

          <dd>Pause playing . Only applicable to video or audio targets.</dd>
        </dlentry>

        <dlentry>
          <dt><tt>resume</tt></dt>

          <dd>Resume playing . Only applicable to video or audio targets.</dd>
        </dlentry>

        <dlentry>
          <dt><tt>mute</tt></dt>

          <dd>Mute sound . Only applicable to video or audio targets.</dd>
        </dlentry>

        <dlentry>
          <dt><tt>unmute</tt></dt>

          <dd>Unmute sound . Only applicable to video or audio targets.</dd>
        </dlentry>

        <dlentry>
          <dt><tt>show</tt></dt>

          <dd>Set the visibility property of the target element to
          visible.</dd>
        </dlentry>

        <dlentry>
          <dt><tt>hide</tt></dt>

          <dd>Set the visibility property of the target element to
          hidden.</dd>
        </dlentry>
      </dl><p>The above actions are exactly those supported by <xref
    href="http://idpf.org/epub/30/spec/epub30-contentdocs.html#sec-xhtml-epub-trigger">EPUB 3's
    <xmlelement>epub:trigger</xmlelement></xref><indexterm>epub:trigger</indexterm><indexterm>EPUB
    3, output format</indexterm>.</p><p>The <xmlpi>onclick</xmlpi>
    processing-instruction is processed by <cmdname>ditac</cmdname> for the
    following output formats: XHTML 5<indexterm>XHTML 5, output
    format</indexterm>, XHTML 5 Web Help<indexterm>Web Help 5, output
    format</indexterm> and EPUB 3<indexterm>EPUB 3, output format</indexterm>.
    It is discarded for any other output format.</p><p>The syntax for the
    content of <xmlpi>onclick</xmlpi> is:</p><pre><i>onclick_data</i> -&gt; <i>action</i> (S <i>action</i>)*
<i>action</i> -&gt; <i>op</i> '(' <i>target_id</i>? ')'
<i>op</i> -&gt; 'play'|'pause'|'resume'|'mute'|'unmute'
      'show'|'hide'</pre><p>When <i>target_id</i> is not specified, it is
    taken from the <xmlatt>href</xmlatt> attribute of the element containing
    the <xmlpi>onclick</xmlpi> processing-instruction. For example,
    <codeph>&lt;xref href="#media/target_audio"&gt;&lt;?onclick
    <b>play()</b>?&gt;</codeph> is equivalent to: <codeph>&lt;xref
    href="#media/target_audio"&gt;&lt;?onclick
    <b>play(media/target_audio)</b>?&gt;</codeph>.</p><p>Example 1: <xref
    href="#media/target_audio"><?onclick play()?>Say: "<i xml:lang="fr">Viens
    Hubble!</i>"</xref>, which, in French, means: "Come here Hubble!".<object
        data="media/audio.wav" id="target_audio" type="audio/wav">
        <desc><image href="media/no_audio.png"/> No audio. Say: "<i
        xml:lang="fr">Viens Hubble!</i>", which, in French, means: "Come here
        Hubble!".</desc>
      </object></p><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;Example 1: &lt;xref href="#media/target_audio"&gt;&lt;?onclick play()?&gt;
Say "&lt;ph xml:lang="fr"&gt;Viens Hubble!&lt;/ph&gt;"&lt;/xref&gt; 
... 
&lt;object data="media/audio.wav" id="audio_sample" type="audio/wav"&gt;
  &lt;desc&gt; ... &lt;/desc&gt;
&lt;/object&gt;&lt;/p&gt;</pre><p>Example 2: <xref
    href="#media/target_image"><?onclick hide()?>Hide Hubble</xref>. <xref
    href="#media/target_image"><?onclick show()?>Show Hubble</xref>.</p><fig>
        <title>My name is Hubble. I'm a 7-month old Golden Retriever.</title>

        <image href="media/video_poster.jpg" id="target_image"/>
      </fig><p>The XML source code corresponding to the above example
    is:</p><pre outputclass="language-xml">&lt;p&gt;Example 2: 
&lt;xref href="#media/target_image"&gt;&lt;?onclick hide()?&gt;Hide Hubble&lt;/xref&gt;.
&lt;xref href="#media/target_image"&gt;&lt;?onclick show()?&gt;Show Hubble&lt;/xref&gt;.&lt;/p&gt;</pre></section>
  </conbody>
</concept>
